@page "/question/{id:int}"
@inject QuestionsClient QuestionsClient
@rendermode InteractiveServer
@if(question is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h2 class="text-center" >@question.Name</h2>
    <div class="mx-auto p-2 border border-dark border-3 rounded" style="width: 66%;" >
        <div class="border border-dark border-3 rounded mb-3 text-center" style="width: 100%">
            <p>@question.Prompt</p>
        </div>
        <div class="d-grid gap-2">
            @if(answers is not null)
            {
                
                @foreach(string answer in answers)
                {
                    <Button Color="ButtonColor.Dark" Outline = "true" Active="@options[answer]" @onclick="() => chooseAnswer(answer)"> <div class="text-start">@answer</div> </Button>
                }
            }
        </div>
        
    </div>
    <div class="mx-auto p-2" style="width: 66%;">
        <Button Color="ButtonColor.Info" @onclick="submitAmswer" >Submit</Button>
        <div><p><em style="color: red" >Current Answer = @userAnswer</em></p></div>
    </div>
    
}

@code {
    [Parameter]
    public int? id {get; set;}
    private QuestionDetails? question;
    private List<string>? answers;
    private string? userAnswer;
    private Dictionary<string,bool> options = new Dictionary<string, bool>();
    private void chooseAnswer(string answer)
    {
        foreach (var key in options.Keys.ToList())
        {
            options[key] = false;
        }
        if(userAnswer is not null)
        {
            if(userAnswer == answer)
            {
                options[answer] = false;
                userAnswer = null;
            }else{
                options[answer] = true;
                userAnswer = answer;
            }
        }else{
            options[answer] = true;
            userAnswer = answer;
        }
        
        
    }

    private void submitAmswer()
    {
        if(userAnswer is null)
        {

            return;
        }
    }
    private List<string> shuffle(List<string> list)
    {
        Random r = new Random();
        List<string> newList = new List<string>(list);
        int count = list.Count();
        for(int i = count - 1; i > 0; i-- )
        {
            int j = r.Next(list.Count);
        	string temp = newList[i];
            newList[i] = newList[j];
            newList[j] = temp;
        }
        return newList;
    }
    protected override async Task OnParametersSetAsync()
    {
        if(id is not null)
        {
            question = await QuestionsClient.GetQuestionAsync(id.Value);

        }
        if(question is not null)
        {
            if(question.WrongAnswers is not null)
            {
                answers = new List<string>{question.Answer};
                answers.AddRange(question.WrongAnswers ?? new List<string>());
                answers = shuffle(answers);
                foreach(var answer in answers)
                {
                    options.TryAdd(answer, false);
                }
            }
            
        }
        
    }
}   
    
    