@page "/question/edit"
@page "/question/edit/{id:int}"
@using Blazored.FluentValidation
@inject NavigationManager NavigationManager
@inject QuestionsClient QuestionsClient
@inject SubjectsClient SubjectsClient
@rendermode InteractiveServer
<h3>@title</h3>
@if(subjects is null || question is null)
{
    <p><em>Loading...</em></p>
}else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm Model="@question" FormName="editQuestion" OnValidSubmit="HandleSubmit">
                <FluentValidationValidator/>
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id = "name" @bind-Value="question.Name" class="form-control"></InputText>
                    <ValidationMessage For="() => question.Name"/>
                </div>
                <div class="mb-3">
                    <label for="prompt" class="form-label">Prompt</label>
                    <InputText id="prompt" @bind-Value ="question.Prompt" class="form-control"></InputText>
                </div>
                <div class="mb-3">
                    <label for="subjectId" class="form-label">Select a subject</label>
                    <InputSelect id="subjectId" @bind-Value ="question.SubjectId" class ="form-select">
                        <option value="">Select a subject</option>
                        @foreach( var subject in subjects)
                        {
                            <option value="@subject.Id">@subject.Name</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => question.SubjectId"/>
                </div>
                <div class="mb-3">
                    <label for="answer" class="form-label">Answer</label>
                    <InputText id="answer" @bind-Value ="question.Answer" class="form-control"></InputText>
                    <ValidationMessage For="() => question.Answer"/>
                </div>
                <div class ="mb-3">
                    <label for="question.WrongAnswers" class="form-label">Wrong Answers</label>
                    <WrongAnswersSubform id="question.WrongAnswers"  @bind-Value="question.WrongAnswers" ValidationFor="@(()=> question.WrongAnswers)"></WrongAnswersSubform>
                </div>
                <div>
                    <button type="submit" class="btn btn-primary mb-3">Submit</button>
                    <a type="button" class="btn btn-warning mb-3" href ="/question">Cancel</a>
                </div>
            
            </EditForm>
        </div>
    </div>
}




@code {
    [Parameter]
    public int? Id {get; set;}
    [SupplyParameterFromForm]
    private QuestionDetails? question {get; set;}
    private Subject[]? subjects;
    private string title = string.Empty;
    protected override async Task OnParametersSetAsync()
    {
        if(question is not null)
        {
            return;
        }
        if(Id is not null)
        {
            question = await QuestionsClient.GetQuestionAsync(Id.Value);
            title = $"Editing ({question.Name}) with id of {question.Id}";
        }
        else
        {
            question = new()
            {
                Name = string.Empty,
                Answer = string.Empty,
            };
            title = "New Question";
        }
    }
    protected override async Task OnInitializedAsync()
    {
        subjects = await SubjectsClient.GetSubjectsAsync();
    }
    private async Task HandleSubmit()
    {
        ArgumentNullException.ThrowIfNull(question);
        if(Id is null){
            await QuestionsClient.AddQuestionAsync(question);
        }
        else
        {
            question.Id = Id.Value;
            await QuestionsClient.UpdateQuestionAsync(question);
        }
        
        NavigationManager.NavigateTo("/question");
    }
}
